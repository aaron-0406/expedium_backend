datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model ROLES {
  id        String   @id @default(uuid())
  name      String?
  description String?
  icon      String?
  created_at DateTime? @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  USERS     USERS[]
  PERMISSIONS PERMISSIONS[]
  ROLE_PERMISSION ROLE_PERMISSION[]
}

model PLANS {
  id        Int      @id @default(autoincrement())
  name      String?
  price     Float?
  description String?
  created_at DateTime? @default(now())
  deleted_at DateTime?
  updated_at DateTime?
  USERS     USERS[]
  CUSTOMER_USER CUSTOMER_USER[]
  PLANS_PERMISSIONS PLANS_PERMISSIONS[]
}

model USERS {
  id        String   @id @default(uuid())
  first_name String
  last_name String?
  password  String?
  email     String?  @unique
  is_active Int?
  phone     String?
  profile_pic String?
  document_id Int?
  rol_id    String?
  created_at DateTime? @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  plan_id_plan Int?
  PLANS     PLANS?   @relation(fields: [plan_id_plan], references: [id])
  ROLES     ROLES?   @relation(fields: [rol_id], references: [id])
}

model PERMISSIONS {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  icon      String
  url       String?
  id_permission_main Int?
  is_dropdown Int?
  position   Int?
  created_at DateTime? @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  ROLES     ROLES[]
  ROLE_PERMISSION ROLE_PERMISSION[]
  PLANS_PERMISSIONS PLANS_PERMISSIONS[]
}

model ROLE_PERMISSION {
  id        Int      @id @default(autoincrement())
  rol_id    String
  permission_id Int
  created_at DateTime? @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  ROLES     ROLES    @relation(fields: [rol_id], references: [id])
  PERMISSIONS PERMISSIONS @relation(fields: [permission_id], references: [id])
}

model BANK {
  id_bank Int @id @default(autoincrement())
  name    String
  description TinyText
  state   TinyInt
  created_at DateTime @default(now())
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK[]
  JUDICIAL_COLLATERAL JUDICIAL_COLLATERAL[]
}

model CUSTOMER {
  id_customer Int @id @default(autoincrement())
  ruc         String
  company_name String
  url_identifier String
  description TinyText
  state       TinyInt
  created_at DateTime @default(now())
  is_scrapper_active TinyInt @default(0)
  CITY CITY[]
  CUSTOMER_USER CUSTOMER_USER[]
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK[]
  GUARANTEE GUARANTEE[]
  ROLE ROLE[]
  NEGOTIATION NEGOTIATION[]
  CLIENT CLIENT[]
  FUNCIONARIO FUNCIONARIO[]
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE[]
  MEMO_ASSIGN MEMO_ASSIGN[]
  USER_LOG USER_LOG[]
}

model CITY {
  id_city Int @id @default(autoincrement())
  name    String
  customer_id_customer Int
  created_at DateTime @default(now())
  CUSTOMER CUSTOMER @relation(fields: [customer_id_customer], references: [id_customer])
  GUARANTEE GUARANTEE[]
  DIRECTION DIRECTION[]
  CLIENT CLIENT[]
}

model GUARANTEE {
  id_guarantee Int @id @default(autoincrement())
  name         String
  customer_id_customer Int
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  CUSTOMER CUSTOMER @relation(fields: [customer_id_customer], references: [id_customer])
  CLIENT CLIENT[]
  MEMO_ASSIGN MEMO_ASSIGN[]
  JUDICIAL_CASE_FILE_HAS_COLLATERAL JUDICIAL_CASE_FILE_HAS_COLLATERAL[]
}

model CUSTOMER_HAS_BANK {
  id_customer_has_bank Int @id @default(autoincrement())
  customer_id_customer Int
  bank_id_bank Int
  created_at DateTime @default(now())
  CUSTOMER CUSTOMER @relation(fields: [customer_id_customer], references: [id_customer])
  BANK BANK @relation(fields: [bank_id_bank], references: [id_bank])
  NEGOTIATION NEGOTIATION[]
  FUNCIONARIO FUNCIONARIO[]
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE[]
  MEMO_ASSIGN MEMO_ASSIGN[]
  SCHEDULED_NOTIFICATIONS_USERS SCHEDULED_NOTIFICATIONS_USERS[]
}

model NEGOTIATION {
  id_negotiation Int @id @default(autoincrement())
  name           String
  created_at DateTime @default(now())
  customer_has_bank_id_customer_has_bank Int
  updated_at DateTime?
  deleted_at DateTime?
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  CUSTOMER CUSTOMER @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer])
  CLIENT CLIENT[]
  FUNCIONARIO FUNCIONARIO[]
  PRODUCT PRODUCT[]
}

model FUNCIONARIO {
  id_funcionario Int @id @default(autoincrement())
  name           String
  created_at DateTime @default(now())
  customer_has_bank_id_customer_has_bank Int
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  CUSTOMER CUSTOMER @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer])
  CLIENT CLIENT[]
}

model ROLE {
  id_role Int @id @default(autoincrement())
  name    String
  customer_id_customer Int
  CUSTOMER CUSTOMER @relation(fields: [customer_id_customer], references: [id_customer])
  CUSTOMER_USER CUSTOMER_USER[]
}

model CUSTOMER_USER {
  id_customer_user Int @id @default(autoincrement())
  name           String
  last_name      String
  phone          String
  dni            String
  email          String  @unique
  password       Text
  state          TinyInt
  created_at DateTime @default(now())
  customer_id_customer Int
  role_id_role Int?
  login_attempts Int @default(0)
  code2fa        String?
  first_access   TinyInt @default(0)
  sub_roles      String?
  CUSTOMER CUSTOMER @relation(fields: [customer_id_customer], references: [id_customer])
  ROLE ROLE? @relation(fields: [role_id_role], references: [id_role])
  CLIENT CLIENT[]
  COMMENT COMMENT[]
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE[]
  MESSAGES_USERS MESSAGES_USERS[]
}

model CLIENT {
  id_client Int @id @default(autoincrement())
  code      String
  negotiation_id_negotiation Int
  dniOrRuc  String?
  name      String
  salePerimeter TinyText?
  phone     TinyText?
  email     TinyText?
  created_at DateTime @default(now())
  city_id_city Int
  funcionario_id_funcionario Int
  customer_user_id_customer_user Int
  customer_has_bank_id_customer_has_bank Int
  chb_transferred Int?
  memo_assignment_date Date?
  is_archived TinyInt @default(0)
  guarantee_id_guarantee Int?
  collection_status_id_collection_status Int @default(0)
  NEGOTIATION NEGOTIATION @relation(fields: [negotiation_id_negotiation], references: [id_negotiation])
  CITY CITY @relation(fields: [city_id_city], references: [id_city])
  FUNCIONARIO FUNCIONARIO @relation(fields: [funcionario_id_funcionario], references: [id_funcionario])
  CUSTOMER_USER CUSTOMER_USER @relation(fields: [customer_user_id_customer_user], references: [id_customer_user])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  GUARANTEE GUARANTEE? @relation(fields: [guarantee_id_guarantee], references: [id_guarantee])
  DIRECTION DIRECTION[]
  COMMENT COMMENT[]
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE[]
}

model EXT_ADDRESS_TYPE {
  id_address_type Int @id @default(autoincrement())
  address_type    String
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  DIRECTION DIRECTION[]
}

model DIRECTION {
  id_direction Int @id @default(autoincrement())
  direction    String
  created_at DateTime @default(now())
  client_id_client Int
  address_type_id_address_type Int?
  department_id_department Int
  province_id_province Int
  district_id_district Int
  lat Decimal?
  lng Decimal?
  CLIENT CLIENT @relation(fields: [client_id_client], references: [id_client])
  EXT_ADDRESS_TYPE EXT_ADDRESS_TYPE? @relation(fields: [address_type_id_address_type], references: [id_address_type])
  DEPARTMENT DEPARTMENT @relation(fields: [department_id_department], references: [id_department])
  PROVINCE PROVINCE @relation(fields: [province_id_province], references: [id_province])
  DISTRICT DISTRICT @relation(fields: [district_id_district], references: [id_district])
  COMMENT COMMENT[]
}

model MANAGEMENT_ACTION {
  id_management_action Int @id @default(autoincrement())
  code_action         String
  name_action         String
  code_sub_type_management String
  customer_has_bank_id_customer_has_bank Int
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  COMMENT COMMENT[]
}

model COMMENT {
  id_comment Int @id @default(autoincrement())
  comment    LongText?
  negotiation String
  management_action_id_management_action Int?
  date        Date
  hour       DateTime @default(now())
  customer_user_id_customer_user Int
  client_id_client Int
  direction_id_direction Int?
  CUSTOMER_USER CUSTOMER_USER @relation(fields: [customer_user_id_customer_user], references: [id_customer_user])
  CLIENT CLIENT @relation(fields: [client_id_client], references: [id_client])
  DIRECTION DIRECTION? @relation(fields: [direction_id_direction], references: [id_direction])
  MANAGEMENT_ACTION MANAGEMENT_ACTION? @relation(fields: [management_action_id_management_action], references: [id_management_action])
}

model DEPARTMENT {
  id_department Int @id @default(autoincrement())
  name          String
  code          String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  DIRECTION DIRECTION[]
  PROVINCE PROVINCE[]
  JUDICIAL_COLLATERAL JUDICIAL_COLLATERAL[]
}

model PROVINCE {
  id_province Int @id @default(autoincrement())
  name        String
  code        String
  department_id_department Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  DEPARTMENT DEPARTMENT @relation(fields: [department_id_department], references: [id_department])
  DIRECTION DIRECTION[]
  DISTRICT DISTRICT[]
  JUDICIAL_COLLATERAL JUDICIAL_COLLATERAL[]
}

model DISTRICT {
  id_district Int @id @default(autoincrement())
  name        String
  code        String
  province_id_province Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  PROVINCE PROVINCE @relation(fields: [province_id_province], references: [id_province])
  DIRECTION DIRECTION[]
  JUDICIAL_COLLATERAL JUDICIAL_COLLATERAL[]
}

model TEMPLATE {
  id_template Int @id @default(autoincrement())
  name        String
  templateJson String
  templatePhoto String
  created_at DateTime @default(now())
  customer_id_customer Int
  CUSTOMER CUSTOMER @relation(fields: [customer_id_customer], references: [id_customer])
  TEMPLATE_HAS_VALUES TEMPLATE_HAS_VALUES[]
  ECAMPO ECAMPO[]
}

model ECAMPO {
  id_ecampo Int @id @default(autoincrement())
  name      String
  field     String
  created_at DateTime @default(now())
  template_id_template Int
  TEMPLATE TEMPLATE @relation(fields: [template_id_template], references: [id_template])
  VALUES VALUES[]
}

model EXT_CONTACT_TYPE {
  id_ext_contact_type Int @id @default(autoincrement())
  contactType        String
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  EXT_CONTACT EXT_CONTACT[]
}

model EXT_CONTACT {
  id_ext_contact Int @id @default(autoincrement())
  name           String
  phone          String?
  email          String?
  state          TinyInt
  client_id_client Int
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  dni            String?
  ext_contact_type_id_ext_contact_type Int?
  CLIENT CLIENT @relation(fields: [client_id_client], references: [id_client])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  EXT_CONTACT_TYPE EXT_CONTACT_TYPE? @relation(fields: [ext_contact_type_id_ext_contact_type], references: [id_ext_contact_type])
}

model EXT_IP_ADDRESS_BANK {
  id_ext_ip_address_bank Int @id @default(autoincrement())
  addressName           String
  ip                    String
  state                TinyInt
  customer_id_customer Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  CUSTOMER CUSTOMER @relation(fields: [customer_id_customer], references: [id_customer])
}

model EXT_PRODUCT_NAME {
  id_ext_product_name Int @id @default(autoincrement())
  product_name        String
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  PRODUCT PRODUCT[]
}

model EXT_TAG_GROUP {
  id_ext_tag_group Int @id @default(autoincrement())
  name             String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  EXT_TAG EXT_TAG[]
}

model EXT_TAG {
  id_ext_tag Int @id @default(autoincrement())
  name       String
  color      String
  tag_group_id_group_tag Int
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  action     TinyInt
  EXT_TAG_GROUP EXT_TAG_GROUP @relation(fields: [tag_group_id_group_tag], references: [id_ext_tag_group])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  FILE FILE[]
  JUDICIAL_OBSERVATION JUDICIAL_OBSERVATION[]
}

model FILE {
  id_file Int @id @default(autoincrement())
  name    LongText
  originalname LongText
  created_at DateTime @default(now())
  id_client Int
  tag_id Int?
  literal_copy_date DateTime?
  CLIENT CLIENT @relation(fields: [id_client], references: [id_client])
  EXT_TAG EXT_TAG? @relation(fields: [tag_id], references: [id_ext_tag])
}

model GOAL {
  id_goal Int @id @default(autoincrement())
  start_date DateTime
  end_date DateTime
  week Int
  customer_id_customer Int
  created_at DateTime @default(now())
  name String
  GOAL_USER GOAL_USER[]
  CUSTOMER CUSTOMER @relation(fields: [customer_id_customer], references: [id_customer])
}

model GOAL_USER {
  id_goal_user Int @id @default(autoincrement())
  quantity     Int
  goal_id_goal Int
  customer_user_id_customer_user Int
  created_at DateTime @default(now())
  GOAL GOAL @relation(fields: [goal_id_goal], references: [id_goal])
  CUSTOMER_USER CUSTOMER_USER @relation(fields: [customer_user_id_customer_user], references: [id_customer_user])
}

model GUARANTEE_INTERVAL {
  id_guarantee_interval Int @id @default(autoincrement())
  description           String
  interval              String
  customer_id_customer Int
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  CUSTOMER CUSTOMER @relation(fields: [customer_id_customer], references: [id_customer])
  GUARANTEE_INTERVAL_MATCH GUARANTEE_INTERVAL_MATCH[]
}

model GUARANTEE_INTERVAL_MATCH {
  id_guarantee_interval_match Int @id @default(autoincrement())
  guarantee_id_guarantee Int
  interval_id_guarantee_interval Int
  value Decimal
  customer_id_customer Int
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  GUARANTEE GUARANTEE @relation(fields: [guarantee_id_guarantee], references: [id_guarantee])
  GUARANTEE_INTERVAL GUARANTEE_INTERVAL @relation(fields: [interval_id_guarantee_interval], references: [id_guarantee_interval])
  CUSTOMER CUSTOMER @relation(fields: [customer_id_customer], references: [id_customer])
}

model JUDICIAL_BIN_TYPE_BINNACLE {
  id_judicial_bin_type_binnacle Int @id @default(autoincrement())
  type_binnacle String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_BINNACLE JUDICIAL_BINNACLE[]
}

model JUDICIAL_BIN_PROCEDURAL_STAGE {
  id_judicial_bin_procedural_stage Int @id @default(autoincrement())
  procedural_stage String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_BINNACLE JUDICIAL_BINNACLE[]
}

model JUDICIAL_COURT {
  id_judicial_court Int @id @default(autoincrement())
  court             String
  customer_has_bank_id_customer_has_bank Int
  city_id_city Int?
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE[]
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  CITY CITY? @relation(fields: [city_id_city], references: [id_city])
}

model JUDICIAL_SUBJECT {
  id_judicial_subject Int @id @default(autoincrement())
  subject            String
  customer_has_bank_id_customer_has_bank Int
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE[]
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model JUDICIAL_PROCEDURAL_WAY {
  id_judicial_procedural_way Int @id @default(autoincrement())
  procedural_way String
  customer_has_bank_id_customer_has_bank Int
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE[]
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model JUDICIAL_SEDE {
  id_judicial_sede Int @id @default(autoincrement())
  sede              String
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE[]
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model JUDICIAL_PROCESS_REASON {
  id_judicial_process_status_reason Int @id @default(autoincrement())
  reason String
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE[]
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model JUDICIAL_CASE_FILE {
  id_judicial_case_file Int @id @default(autoincrement())
  name                  String
  created_at DateTime @default(now())
  customer_has_bank_id_customer_has_bank Int
  updated_at DateTime?
  deleted_at DateTime?
  negotiation_id_negotiation Int
  customer_user_id_customer_user Int
  judicial_court_id_judicial_court Int
  judicial_subject_id_judicial_subject Int
  judicial_procedural_way_id_judicial_procedural_way Int
  process_reason_id Int?
  process_status String?
  process_comment LongText?
  id_judicial_case_file_related Int?
  is_scan_valid TinyInt @default(1)
  was_scanned TinyInt @default(0)
  is_archived TinyInt @default(0)
  chb_transferred Int?
  comercial_value_soles Decimal?
  comercial_value_dollars Decimal?
  amount_affection_soles Decimal?
  amount_affection_dollars Decimal?
  judgment_number Int?
  secretary String?
  amount_demanded_soles Decimal?
  amount_demanded_dollars Decimal?
  cautionary_code String?
  errand_code String?
  judge String?
  demand_date DateTime?
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  NEGOTIATION NEGOTIATION @relation(fields: [negotiation_id_negotiation], references: [id_negotiation])
  CUSTOMER_USER CUSTOMER_USER @relation(fields: [customer_user_id_customer_user], references: [id_customer_user])
  JUDICIAL_COURT JUDICIAL_COURT @relation(fields: [judicial_court_id_judicial_court], references: [id_judicial_court])
  JUDICIAL_SUBJECT JUDICIAL_SUBJECT @relation(fields: [judicial_subject_id_judicial_subject], references: [id_judicial_subject])
  JUDICIAL_PROCEDURAL_WAY JUDICIAL_PROCEDURAL_WAY @relation(fields: [judicial_procedural_way_id_judicial_procedural_way], references: [id_judicial_procedural_way])
  JUDICIAL_PROCESS_REASON JUDICIAL_PROCESS_REASON? @relation(fields: [process_reason_id], references: [id_judicial_process_status_reason])
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE? @relation("JUDICIAL_CASE_FILE_ibfk_1", fields: [id_judicial_case_file_related], references: [id_judicial_case_file])
  JUDICIAL_SEDE JUDICIAL_SEDE? @relation(fields: [judicial_sede_id_judicial_sede], references: [id_judicial_sede])
  JUDICIAL_BINNACLE JUDICIAL_BINNACLE[]
  JUDICIAL_OBSERVATION JUDICIAL_OBSERVATION[]
  JUDICIAL_RESOURCES JUDICIAL_RESOURCES[]
  JUDICIAL_CASE_FILE_HAS_COLLATERAL JUDICIAL_CASE_FILE_HAS_COLLATERAL[]
  CLIENT CLIENT[]
  MEMO_ASSIGN MEMO_ASSIGN[]
}

model JUDICIAL_BINNACLE {
  id_judicial_binnacle Int @id @default(autoincrement())
  type_binnacle_id_type_binnacle Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  customer_has_bank_id_customer_has_bank Int
  date DateTime @default(now())
  judicial_bin_procedural_stage_id_judicial_bin_procedural_stage Int
  judicial_file_case_id_judicial_file_case Int
  last_performed LongText?
  total_tariff Decimal @default(0.00)
  tariff_history LongText
  index Int?
  resolution_date DateTime?
  entry_date DateTime?
  notification_type String?
  acto String?
  fojas Int?
  folios Int?
  provedio_date DateTime?
  user_description String?
  created_by String?
  JUDICIAL_BIN_TYPE_BINNACLE JUDICIAL_BIN_TYPE_BINNACLE @relation(fields: [type_binnacle_id_type_binnacle], references: [id_judicial_bin_type_binnacle])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  JUDICIAL_BIN_PROCEDURAL_STAGE JUDICIAL_BIN_PROCEDURAL_STAGE @relation(fields: [judicial_bin_procedural_stage_id_judicial_bin_procedural_stage], references: [id_judicial_bin_procedural_stage])
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE @relation(fields: [judicial_file_case_id_judicial_file_case], references: [id_judicial_case_file])
  JUDICIAL_BINNACLE_FILE JUDICIAL_BINNACLE_FILE[]
  JUDICIAL_BIN_NOTIFICATION JUDICIAL_BIN_NOTIFICATION[]
}

model JUDICIAL_BINNACLE_FILE {
  id_judicial_bin_file Int @id @default(autoincrement())
  judicial_binnacle_id_judicial_binnacle Int
  name_origin_aws String
  original_name String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  customer_has_bank_id_customer_has_bank Int
  size Int
  JUDICIAL_BINNACLE JUDICIAL_BINNACLE @relation(fields: [judicial_binnacle_id_judicial_binnacle], references: [id_judicial_binnacle])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model JUDICIAL_BIN_NOTIFICATION {
  id_judicial_bin_notification Int @id @default(autoincrement())
  notification_code String?
  addressee String?
  ship_date DateTime?
  attachments String?
  delivery_method String?
  resolution_date DateTime?
  notification_print DateTime?
  sent_central DateTime?
  central_receipt DateTime?
  notification_to_recipient_on DateTime?
  charge_returned_to_court_on DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  judicial_binnacle_id_judicial_binnacle Int
  JUDICIAL_BINNACLE JUDICIAL_BINNACLE @relation(fields: [judicial_binnacle_id_judicial_binnacle], references: [id_judicial_binnacle])
}

model JUDICIAL_USE_OF_PROPERTY {
  id_judicial_use_of_property Int @id @default(autoincrement())
  name String
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_COLLATERAL JUDICIAL_COLLATERAL[]
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model JUDICIAL_REGISTRATION_AREA {
  id_judicial_registration_area Int @id @default(autoincrement())
  name String
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_COLLATERAL JUDICIAL_COLLATERAL[]
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model JUDICIAL_REGISTER_OFFICE {
  id_judicial_register_office Int @id @default(autoincrement())
  name String
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_COLLATERAL JUDICIAL_COLLATERAL[]
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model JUDICIAL_NOTARY {
  id_judicial_notary Int @id @default(autoincrement())
  name String
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_COLLATERAL JUDICIAL_COLLATERAL[]
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model JUDICIAL_COLLATERAL {
  id_judicial_collateral Int @id @default(autoincrement())
  kind_of_property String
  property_address LongText
  property_features LongText
  land_area LongText
  construction_area LongText
  electronic_record String
  date_of_public_deed DateTime @default(now())
  number_of_collateral String?
  registration_seat String
  customer_has_bank_id_customer_has_bank Int
  department_id Int
  province_id Int
  district_id Int
  use_of_property_id Int
  registration_area_id Int
  register_office Int
  notary_id Int?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  land_area_unit_id_land_area_unit Int?
  construction_area_unit_id_construction_area_unit Int?
  JUDICIAL_USE_OF_PROPERTY JUDICIAL_USE_OF_PROPERTY @relation(fields: [use_of_property_id], references: [id_judicial_use_of_property])
  JUDICIAL_REGISTRATION_AREA JUDICIAL_REGISTRATION_AREA @relation(fields: [registration_area_id], references: [id_judicial_registration_area])
  JUDICIAL_REGISTER_OFFICE JUDICIAL_REGISTER_OFFICE @relation(fields: [register_office], references: [id_judicial_register_office])
  JUDICIAL_NOTARY JUDICIAL_NOTARY? @relation(fields: [notary_id], references: [id_judicial_notary])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  DEPARTMENT DEPARTMENT @relation(fields: [department_id], references: [id_department])
  PROVINCE PROVINCE @relation(fields: [province_id], references: [id_province])
  DISTRICT DISTRICT @relation(fields: [district_id], references: [id_district])
  JUDICIAL_COLLATERAL_AUCTION_ROUND JUDICIAL_COLLATERAL_AUCTION_ROUND[]
  JUDICIAL_COLLATERAL_CHARGES_ENCUMBRANCES JUDICIAL_COLLATERAL_CHARGES_ENCUMBRANCES[]
  JUDICIAL_COLLATERAL_FILES JUDICIAL_COLLATERAL_FILES[]
  JUDICIAL_CASE_FILE_HAS_COLLATERAL JUDICIAL_CASE_FILE_HAS_COLLATERAL[]
}

model JUDICIAL_COLLATERAL_AUCTION_ROUND {
  id_judicial_collateral_auction_round Int @id @default(autoincrement())
  judicial_collateral_id_judicial_collateral Int
  customer_has_bank_id_customer_has_bank Int
  appraisal_date DateTime?
  expert_report_date DateTime?
  encumbrance_amount_soles Decimal?
  encumbrance_amount_dollars Decimal?
  conventional_value_soles Decimal?
  conventional_value_dollars Decimal?
  market_value_soles Decimal?
  market_value_dollars Decimal?
  realization_value_soles Decimal?
  realization_value_dollars Decimal?
  auction_value_soles Decimal?
  auction_value_dollars Decimal?
  auction_round Int
  first_call_soles Decimal?
  first_call_dollars Decimal?
  second_call_soles Decimal?
  second_call_dollars Decimal?
  third_call_soles Decimal?
  third_call_dollars Decimal?
  appraisal_experts LongText
  auction_type String
  auctioner_name String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_COLLATERAL JUDICIAL_COLLATERAL @relation(fields: [judicial_collateral_id_judicial_collateral], references: [id_judicial_collateral])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model JUDICIAL_COLLATERAL_CHARGES_ENCUMBRANCES_TYPE_LOAD {
  id_type_of_load Int @id @default(autoincrement())
  name String
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_COLLATERAL_CHARGES_ENCUMBRANCES JUDICIAL_COLLATERAL_CHARGES_ENCUMBRANCES[]
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model JUDICIAL_COLLATERAL_CHARGES_ENCUMBRANCES {
  id_judicial_collateral_charges_encumbrances Int @id @default(autoincrement())
  judicial_collateral_id_judicial_collateral Int
  type_of_load_id Int
  amount_of_impact_soles Decimal
  amount_of_impact_dollars Decimal
  description_of_load LongText
  registration_seat String
  registration_date DateTime @default(now())
  range Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  appraisal_date DateTime?
  JUDICIAL_COLLATERAL JUDICIAL_COLLATERAL @relation(fields: [judicial_collateral_id_judicial_collateral], references: [id_judicial_collateral])
  JUDICIAL_COLLATERAL_CHARGES_ENCUMBRANCES_TYPE_LOAD JUDICIAL_COLLATERAL_CHARGES_ENCUMBRANCES_TYPE_LOAD @relation(fields: [type_of_load_id], references: [id_type_of_load])
}

model JUDICIAL_COLLATERAL_FILES {
  id_judicial_collateral_files Int @id @default(autoincrement())
  name_origin_aws LongText
  original_name LongText
  judicial_collateral_id_judicial_collateral Int
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_COLLATERAL JUDICIAL_COLLATERAL @relation(fields: [judicial_collateral_id_judicial_collateral], references: [id_judicial_collateral])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model JUDICIAL_CASE_FILE_HAS_COLLATERAL {
  id_judicial_case_file_has_collateral Int @id @default(autoincrement())
  judicial_case_file_id Int
  judicial_collateral_id Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE @relation(fields: [judicial_case_file_id], references: [id_judicial_case_file])
  JUDICIAL_COLLATERAL JUDICIAL_COLLATERAL @relation(fields: [judicial_collateral_id], references: [id_judicial_collateral])
}

model JUDICIAL_OBS_TYPE {
  id_judicial_obs_type Int @id @default(autoincrement())
  type String
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_OBSERVATION JUDICIAL_OBSERVATION[]
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model JUDICIAL_OBSERVATION {
  id_judicial_observation Int @id @default(autoincrement())
  date DateTime @default(now())
  comment LongText
  judicial_case_file_id_judicial_case_file Int
  judicial_obs_type_id_judicial_obs_type Int
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE @relation(fields: [judicial_case_file_id_judicial_case_file], references: [id_judicial_case_file])
  JUDICIAL_OBS_TYPE JUDICIAL_OBS_TYPE @relation(fields: [judicial_obs_type_id_judicial_obs_type], references: [id_judicial_obs_type])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  JUDICIAL_OBS_FILE JUDICIAL_OBS_FILE[]
}

model JUDICIAL_OBS_FILE {
  id_judicial_obs_file Int @id @default(autoincrement())
  aws_name LongText
  original_name LongText
  judicial_observation_id_judicial_observation Int
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  JUDICIAL_OBSERVATION JUDICIAL_OBSERVATION @relation(fields: [judicial_observation_id_judicial_observation], references: [id_judicial_observation])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model JUDICIAL_RESOURCES {
  id_judicial_resources Int @id @default(autoincrement())
  nameOriginAws String
  originalName String
  judicial_case_file_id_judicial_case_file Int
  customer_has_bank_id_customer_has_bank Int
  size Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  reason String?
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE @relation(fields: [judicial_case_file_id_judicial_case_file], references: [id_judicial_case_file])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model MEMO_ASSIGN {
  id_memo_assign Int @id @default(autoincrement())
  memo_assignment_date DateTime @default(now())
  client_id_client Int
  customer_has_bank_id_customer_has_bank Int
  guarantee_id_guarantee Int?
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  CLIENT CLIENT @relation(fields: [client_id_client], references: [id_client])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  GUARANTEE GUARANTEE? @relation(fields: [guarantee_id_guarantee], references: [id_guarantee])
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE[]
}

model MESSAGE {
  id_message Int @id @default(autoincrement())
  customer_user_id_customer_user Int
  subject String
  body LongText
  customer_has_bank_id_customer_has_bank Int
  key_message String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  was_read TinyInt
  CUSTOMER_USER CUSTOMER_USER @relation(fields: [customer_user_id_customer_user], references: [id_customer_user])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  MESSAGES_USERS MESSAGES_USERS[]
}

model MESSAGES_USERS {
  id_messages_users Int @id @default(autoincrement())
  message_id Int
  customer_user_id_customer_user Int
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  MESSAGE MESSAGE @relation(fields: [message_id], references: [id_message])
  CUSTOMER_USER CUSTOMER_USER @relation(fields: [customer_user_id_customer_user], references: [id_customer_user])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
}

model MODULE {
  id_module Int @id @default(autoincrement())
  name String
  description TinyText
  state TinyInt
  created_at DateTime @default(now())
}

model PLANS_PERMISSIONS {
  id Int @id @default(autoincrement())
  permission_id_permission String
  plan_id_plan Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  PERMISSIONS PERMISSIONS @relation(fields: [permission_id_permission], references: [id])
  PLANS PLANS @relation(fields: [plan_id_plan], references: [id])
}

model SCHEDULED_NOTIFICATIONS {
  id_scheduled_notification Int @id @default(autoincrement())
  name_notification String
  description_notification LongText
  frequency_to_notify Int
  hour_time_to_notify DateTime @default(now())
  logic_key String
  state TinyInt
  customer_has_bank_id_customer_has_bank Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  days_to_notify String?
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  SCHEDULED_NOTIFICATIONS_USERS SCHEDULED_NOTIFICATIONS_USERS[]
}

model SCHEDULED_NOTIFICATIONS_USERS {
  id_scheduled_notification_user Int @id @default(autoincrement())
  customer_has_bank_id_customer_has_bank Int
  scheduled_notification_id_scheduled_notification Int
  customer_user_id_customer_user Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  deleted_at DateTime?
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  SCHEDULED_NOTIFICATIONS SCHEDULED_NOTIFICATIONS @relation(fields: [scheduled_notification_id_scheduled_notification], references: [id_scheduled_notification])
  CUSTOMER_USER CUSTOMER_USER @relation(fields: [customer_user_id_customer_user], references: [id_customer_user])
}

model TARIFF {
  id_tariff Int @id @default(autoincrement())
  type String
  code String
  description LongText
  customer_has_bank_id_customer_has_bank Int @default(0)
  TARIFF_INTERVAL_MATCH TARIFF_INTERVAL_MATCH[]
}

model TARIFF_INTERVAL {
  id_tariff_interval Int @id @default(autoincrement())
  description LongText
  interval String
  interval_description String
  TARIFF_INTERVAL_MATCH TARIFF_INTERVAL_MATCH[]
}

model TARIFF_INTERVAL_MATCH {
  id_tariff_interval_match Int @id @default(autoincrement())
  tariff_id Int
  interval_id Int
  value Decimal
  TARIFF TARIFF @relation(fields: [tariff_id], references: [id_tariff])
  TARIFF_INTERVAL TARIFF_INTERVAL @relation(fields: [interval_id], references: [id_tariff_interval])
}

model TEMPLATE_HAS_VALUES {
  id_template_has_values Int @id @default(autoincrement())
  name String
  created_at DateTime @default(now())
  template_id_template Int
  TEMPLATE TEMPLATE @relation(fields: [template_id_template], references: [id_template])
  VALUES VALUES[]
}

model TEMPLATE_IMG {
  id_template_img Int @id @default(autoincrement())
  img String
  size String
  created_at DateTime @default(now())
  template_id_template Int
  TEMPLATE TEMPLATE @relation(fields: [template_id_template], references: [id_template])
}

model USER_APP {
  id_user_app Int @id @default(autoincrement())
  code String
  dni String
  name String
  last_name String
  address String
  phone String
  email String
  password String
  state TinyInt
  created_at DateTime @default(now())
  role_id_role Int?
  ROLE ROLE? @relation(fields: [role_id_role], references: [id_role])
}

model USER_LOG {
  id_user_log Int @id @default(autoincrement())
  codeAction String
  entityId Int
  entity String
  ip String
  createAt DateTime @default(now())
  customer_user_id_customer_user Int
  customer_id_customer Int
  method_summary LongText?
  CUSTOMER_USER CUSTOMER_USER @relation(fields: [customer_user_id_customer_user], references: [id_customer_user])
  CUSTOMER CUSTOMER @relation(fields: [customer_id_customer], references: [id_customer])
}

model VALUES {
  id_value Int @id @default(autoincrement())
  field String
  value String
  created_at DateTime @default(now())
  template_has_values_id_template_has_values Int
  ecampo_id_ecampo Int
  TEMPLATE_HAS_VALUES TEMPLATE_HAS_VALUES @relation(fields: [template_has_values_id_template_has_values], references: [id_template_has_values])
  ECAMPO ECAMPO @relation(fields: [ecampo_id_ecampo], references: [id_ecampo])
}

model PRODUCT {
  id_product Int @id @default(autoincrement())
  code String
  state String
  customer_id_customer Int
  negotiation_id_negotiation Int?
  client_id Int?
  customer_has_bank_id_customer_has_bank Int
  ext_product_name_id_ext_product_name Int?
  judicial_case_file_id_judicial_case_file Int?
  CUSTOMER CUSTOMER @relation(fields: [customer_id_customer], references: [id_customer])
  NEGOTIATION NEGOTIATION? @relation(fields: [negotiation_id_negotiation], references: [id_negotiation])
  CLIENT CLIENT? @relation(fields: [client_id], references: [id_client])
  CUSTOMER_HAS_BANK CUSTOMER_HAS_BANK @relation(fields: [customer_has_bank_id_customer_has_bank], references: [id_customer_has_bank])
  EXT_PRODUCT_NAME EXT_PRODUCT_NAME? @relation(fields: [ext_product_name_id_ext_product_name], references: [id_ext_product_name])
  JUDICIAL_CASE_FILE JUDICIAL_CASE_FILE? @relation(fields: [judicial_case_file_id_judicial_case_file], references: [id_judicial_case_file])
}
